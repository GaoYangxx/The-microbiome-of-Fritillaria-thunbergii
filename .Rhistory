library(tidyverse)
library(readr)
library(readxl)
library(data.table)
library(phyloseq)
library(qiime2R)
library(ape)
library(magrittr)
library(dplyr)
library(tidyr)
library(iCAMP)
library(ggtree)
library(ggtreeExtra)
library(phytools)
library(ggplot2)
library(ggnewscale)
library(castor)
library(viridis)
library(phangorn)
library(geosphere)
#细菌icamp距离衰减
#读取数据
bacteria_ASV <- read.csv(file = "D:/study/master/meiji/bacteria_ASV.csv",
sep=",",header=TRUE,check.names = FALSE)
# 定义文件的绝对路径（使用正斜杠）
metadata <- "D:/study/master/metadata.tsv"
# 导入元数据文件
metadata <- import_qiime_sample_data(metadata)
# 查看元数据
head(metadata)
# 读取 ASV 表（特征表）
b_ASV <- bacteria_ASV[, c("ASV",metadata$Sample.ID)]
b_ASV <- b_ASV %>% column_to_rownames(var = "ASV")
head(b_ASV)
# 读取 taxonomy（分类信息）
b_tax <- bacteria_ASV[, 2:9]
b_tax <- b_tax %>% column_to_rownames(var = "ASV")
head(b_tax)
#分步生成和读取系统发育树
b_tree <- read_qza("D:/study/master/meiji/b_rooted-tree.qza")
b_phylo_tree <- b_tree$data
b_md5<-read_excel("D:/study/master/meiji/b_ASV_md5.xlsx")#md5值
b_rename_vector <- setNames(b_md5$`ASV ID`, b_md5$md5)
b_phylo_tree$tip.label <- b_rename_vector[b_phylo_tree$tip.label] #替换tip.label
# 合并为 phyloseq 对象
b_ASV <- otu_table(b_ASV, taxa_are_rows = TRUE)
b_tax <- tax_table(as.matrix(b_tax))
b_merged <- merge_phyloseq(b_ASV, b_tax, metadata, phy_tree(b_phylo_tree))
#去除非细菌
b_merged <- phyloseq::subset_taxa(b_merged, (Kingdom!="d__Eukaryota") | is.na(Kingdom))
b_merged <- phyloseq::subset_taxa(b_merged, (Kingdom!="d__Archaea") | is.na(Kingdom))
b_merged <- phyloseq::subset_taxa(b_merged, (Order!="o__Chloroplast") )
b_merged <- phyloseq::subset_taxa(b_merged, (Family!="f__Mitochondria"))
b_merged <- phyloseq::subset_taxa(b_merged, (Family!="NA"))
# 提取 ASV 表
b_ASV <- as.matrix(otu_table(b_merged, taxa_are_rows=T))
b_ASV_df <- b_ASV[rowSums(b_ASV[])>0,]
# 读取包含iCAMP结果的CSV文件
b_iCAMP <- read.csv("D:/study/master/iCAMP/bacteria_all_data/iCAMP_results_all_data/all_bacteria.ProcessImportance_EachTurnover_Overall.csv", head=T)
b_iCAMP <- b_iCAMP %>% filter(Method == "CbMPDiCbraya")
b_iCAMP$cut <- paste(b_iCAMP$samp1, b_iCAMP$samp2, sep = "")
#经纬度
NOMIS_df <- data.frame(
longitude = as.numeric(metadata$longitude),
latitude = as.numeric(metadata$latitude),
Sample = rownames(metadata)
)
#计算经纬度的地理距离矩阵
# 从坐标数据框中提取组名和坐标
sample_names <- NOMIS_df$Sample
sample_longitudes <- NOMIS_df$longitude
sample_latitudes <- NOMIS_df$latitude
# 创建一个空的数据框，用于存储每对组的距离
pairwise_geo_distances <- data.frame(
Sample1 = character(),
Sample2 = character(),
Geo_Distance_Meters = numeric(), # 距离单位是米
stringsAsFactors = FALSE
)
# 循环遍历所有唯一的组对并计算距离
num_samples <- length(sample_names)
for (i in 1:(num_samples - 1)) {
for (j in (i + 1):num_samples) {
# 获取第一个组的坐标
sample1_name <- sample_names[i]
coords1 <- c(sample_longitudes[i], sample_latitudes[i])
# 获取第二个组的坐标
sample2_name <- sample_names[j]
coords2 <- c(sample_longitudes[j], sample_latitudes[j])
# 计算地理距离
distance <- geosphere::distGeo(p1 = coords1, p2 = coords2)
# 将结果添加到数据框中
pairwise_geo_distances <- rbind(pairwise_geo_distances, data.frame(
Sample1 = sample1_name,
Sample2 = sample2_name,
Geo_Distance_Meters = distance
))
}
}
pairwise_geo_distances$cut <- paste(pairwise_geo_distances$Sample1, pairwise_geo_distances$Sample2, sep = "")
b_iCAMP_geo <- b_iCAMP %>%
# 使用 left_join 合并，以 'cut' 列为共同键
left_join(pairwise_geo_distances, by = "cut") %>%
# 选择你最终希望保留的列
dplyr::select(
samp1,
samp2,
HeS,
HoS,
DL,
HD,
DR,
cut,
Geo_Distance_Meters
)
b_iCAMP_geo <- b_iCAMP_geo %>%
filter(Geo_Distance_Meters != 0)
# 创建ggplot对象
p_bacteria <- ggplot() +
# 添加地理距离与HoS散点图
geom_point(data= b_iCAMP_geo, aes(Geo_Distance_Meters/1000, HoS*100, color = "HoS"), col=rgb(0,0,1,0.25), cex=2) +
# 添加地理距离与HoS线性拟合平滑曲线
geom_smooth(data=b_iCAMP_geo, aes(Geo_Distance_Meters/1000, HoS*100, color = "HoS"), method="lm") +
# 添加地理距离与DR散点图
geom_point(data=b_iCAMP_geo, aes(Geo_Distance_Meters/1000, DR*100, color = "DR"), col=rgb(1,0,0,0.25), cex=2) +
# 添加地理距离与DR线性拟合平滑曲线
geom_smooth(data=b_iCAMP_geo, aes(Geo_Distance_Meters/1000, DR*100, color = "DR"), method="lm") +
# 手动设置颜色和图例标签
scale_color_manual(
values = c("HoS" = "blue", "DR" = "red"), # 定义 HoS 为蓝色，DR 为红色
labels = c("HoS", "DR") # 定义图例显示为 "HoS" 和 "DR"
) +
# 使用白色背景主题
theme_bw() +
# 对x轴进行log10转换
scale_x_continuous(trans='log10') +
# 设置坐标轴标签
labs(x="Geographic distance (km)", y="Bacterial contribution (%)")+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title = element_blank(),            #移除图例标题
legend.position = c(0.05, 0.95),           #设置图例位置 (x, y 坐标)
legend.justification = c("left", "top"),   #图例对齐方式
axis.title = element_text(size = 16),       # 坐标轴标题大小
axis.text = element_text(size = 14),        # 坐标轴刻度大小
legend.text = element_text(size = 14))   # 图例内容大小
# 显示图形
p_bacteria
#ggsave("D:/study/master/Main_Figure_tables/Figure_5/5b_iCAMP_geo_distance_bacteria.png", plot = p_bacteria, width = 8, height = 8, dpi = 600, bg = "transparent")
# 对 HoS 进行线性回归分析
# 注意：自变量是 log10 转换后的地理距离
b_model_hos <- lm(I(HoS * 100) ~ log10(Geo_Distance_Meters / 1000), data = b_iCAMP_geo)
# 查看 HoS 模型的统计摘要
summary(b_model_hos)
# 对 DR 进行线性回归分析
# 注意：自变量是 log10 转换后的地理距离
b_model_dr <- lm(I(DR * 100) ~ log10(Geo_Distance_Meters / 1000), data = b_iCAMP_geo)
# 查看 DR 模型的统计摘要
summary(b_model_dr)
#真菌icamp距离衰减
#读取数据
fungi_ASV <- read.csv(file = "D:/study/master/meiji/fungi_ASV.csv",
sep=",",header=TRUE,check.names = FALSE)
# 定义文件的绝对路径（使用正斜杠）
metadata <- "D:/study/master/metadata.tsv"
# 导入元数据文件
metadata <- import_qiime_sample_data(metadata)
# 查看元数据
head(metadata)
# 读取 ASV 表（特征表）
f_ASV <- fungi_ASV[, c("ASV",metadata$Sample.ID)]
f_ASV <- f_ASV %>% column_to_rownames(var = "ASV")
head(f_ASV)
# 读取 taxonomy（分类信息）
f_tax <- fungi_ASV[, 2:9]
f_tax <- f_tax %>% column_to_rownames(var = "ASV")
head(f_tax)
#分步生成和读取系统发育树
f_tree <- read_qza("D:/study/master/meiji/f_rooted-tree.qza")
f_phylo_tree <- f_tree$data
f_md5<-read_excel("D:/study/master/meiji/f_ASV_md5.xlsx")#md5值
f_rename_vector <- setNames(f_md5$`ASV ID`, f_md5$md5)
f_phylo_tree$tip.label <- f_rename_vector[f_phylo_tree$tip.label] #替换tip.label
# 合并为 phyloseq 对象
f_ASV <- otu_table(f_ASV, taxa_are_rows = TRUE)
f_tax <- tax_table(as.matrix(f_tax))
f_merged <- merge_phyloseq(f_ASV, f_tax, metadata, phy_tree(f_phylo_tree))
#去除非真菌
f_merged <- phyloseq::subset_taxa(f_merged, (Kingdom!="d__Eukaryota") | is.na(Kingdom))
f_merged <- phyloseq::subset_taxa(f_merged, (Kingdom!="d__Archaea") | is.na(Kingdom))
f_merged <- phyloseq::subset_taxa(f_merged, (Order!="o__Chloroplast") )
f_merged <- phyloseq::subset_taxa(f_merged, (Family!="f__Mitochondria"))
f_merged <- phyloseq::subset_taxa(f_merged, (Family!="NA"))
# 提取 ASV 表
f_ASV <- as.matrix(otu_table(f_merged, taxa_are_rows=T))
f_ASV_df <- f_ASV[rowSums(f_ASV[])>0,]
# 读取包含iCAMP结果的CSV文件
f_iCAMP <- read.csv("D:/study/master/iCAMP/fungi_all_data/iCAMP_results_all_data/all_fungi.ProcessImportance_EachTurnover_Overall.csv", head=T)
f_iCAMP <- f_iCAMP %>% filter(Method == "CbMPDiCbraya")
f_iCAMP$cut <- paste(f_iCAMP$samp1, f_iCAMP$samp2, sep = "")
#经纬度
NOMIS_df <- data.frame(
longitude = as.numeric(metadata$longitude),
latitude = as.numeric(metadata$latitude),
Sample = rownames(metadata)
)
#计算经纬度的地理距离矩阵
# 从坐标数据框中提取组名和坐标
sample_names <- NOMIS_df$Sample
sample_longitudes <- NOMIS_df$longitude
sample_latitudes <- NOMIS_df$latitude
# 创建一个空的数据框，用于存储每对组的距离
pairwise_geo_distances <- data.frame(
Sample1 = character(),
Sample2 = character(),
Geo_Distance_Meters = numeric(), # 距离单位是米
stringsAsFactors = FALSE
)
# 循环遍历所有唯一的组对并计算距离
num_samples <- length(sample_names)
for (i in 1:(num_samples - 1)) {
for (j in (i + 1):num_samples) {
# 获取第一个组的坐标
sample1_name <- sample_names[i]
coords1 <- c(sample_longitudes[i], sample_latitudes[i])
# 获取第二个组的坐标
sample2_name <- sample_names[j]
coords2 <- c(sample_longitudes[j], sample_latitudes[j])
# 计算地理距离
distance <- geosphere::distGeo(p1 = coords1, p2 = coords2)
# 将结果添加到数据框中
pairwise_geo_distances <- rbind(pairwise_geo_distances, data.frame(
Sample1 = sample1_name,
Sample2 = sample2_name,
Geo_Distance_Meters = distance
))
}
}
pairwise_geo_distances$cut <- paste(pairwise_geo_distances$Sample1, pairwise_geo_distances$Sample2, sep = "")
f_iCAMP_geo <- f_iCAMP %>%
# 使用 left_join 合并，以 'cut' 列为共同键
left_join(pairwise_geo_distances, by = "cut") %>%
# 选择你最终希望保留的列
dplyr::select(
samp1,
samp2,
HeS,
HoS,
DL,
HD,
DR,
cut,
Geo_Distance_Meters
)
f_iCAMP_geo <- f_iCAMP_geo %>%
filter(Geo_Distance_Meters != 0)
# 创建ggplot对象
p_fungi <- ggplot() +
# 添加地理距离与HoS散点图
geom_point(data= f_iCAMP_geo, aes(Geo_Distance_Meters/1000, HoS*100, color = "HoS"), col=rgb(0,0,1,0.25), cex=2) +
# 添加地理距离与HoS线性拟合平滑曲线
geom_smooth(data=f_iCAMP_geo, aes(Geo_Distance_Meters/1000, HoS*100, color = "HoS"), method="lm") +
# 添加地理距离与DR散点图
geom_point(data=f_iCAMP_geo, aes(Geo_Distance_Meters/1000, DR*100, color = "DR"), col=rgb(1,0,0,0.25), cex=2) +
# 添加地理距离与DR线性拟合平滑曲线
geom_smooth(data=f_iCAMP_geo, aes(Geo_Distance_Meters/1000, DR*100, color = "DR"), method="lm") +
# 手动设置颜色和图例标签
scale_color_manual(
values = c("HoS" = "blue", "DR" = "red"), # 定义 HoS 为蓝色，DR 为红色
labels = c("HoS", "DR") # 定义图例显示为 "HoS" 和 "DR"
) +
# 使用白色背景主题
theme_bw() +
# 对x轴进行log10转换
scale_x_continuous(trans='log10') +
# 设置坐标轴标签
labs(x="Geographic distance (km)", y="Fungal contribution (%)")+
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
legend.title = element_blank(),            #移除图例标题
legend.position = c(0.05, 0.95),           #设置图例位置 (x, y 坐标)
legend.justification = c("left", "top"),   #图例对齐方式
axis.title = element_text(size = 16),       # 坐标轴标题大小
axis.text = element_text(size = 14),        # 坐标轴刻度大小
legend.text = element_text(size = 14))   # 图例内容大小
# 显示图形
p_fungi
#ggsave("D:/study/master/Main_Figure_tables/Figure_5/5b_iCAMP_geo_distance_fungi.png", plot = p_fungi, width = 8, height = 8, dpi = 600, bg = "transparent")
# 对 HoS 进行线性回归分析
# 注意：自变量是 log10 转换后的地理距离
f_model_hos <- lm(I(HoS * 100) ~ log10(Geo_Distance_Meters / 1000), data = f_iCAMP_geo)
# 查看 HoS 模型的统计摘要
summary(f_model_hos)
# 对 DR 进行线性回归分析
# 注意：自变量是 log10 转换后的地理距离
f_model_dr <- lm(I(DR * 100) ~ log10(Geo_Distance_Meters / 1000), data = f_iCAMP_geo)
# 查看 DR 模型的统计摘要
summary(f_model_dr)
